


ARM Macro Assembler    Page 1 


    1 00000000         ;schedular as an asm function
    2 00000000 E0004000 
                       T0IR    EQU              0xE0004000
    3 00000000 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010
    4 00000000 FFFFF034 
                       VICVectAddr
                               EQU              0xFFFFF034
    5 00000000 00000010 
                       Mode_USR
                               EQU              0x10
    6 00000000 FFFFF200 
                       VICVectCntl0
                               EQU              0xFFFFF200
    7 00000000 E000C000 
                       U0THR   EQU              0xE000C000
    8 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
    9 00000000         
   10 00000000                 AREA             context_switch,CODE,READONLY
   11 00000000                 EXPORT           context_switch
   12 00000000         
   13 00000000 E818001F        LDMDA            R8,{R0-R4}
   14 00000004 E59F83E4        LDR              R8,=0x40001F10
   15 00000008 E5D88000        LDRB             R8,[R8]
   16 0000000C         
   17 0000000C E3A09003        LDR              R9,=3
   18 00000010         
   19 00000010 E1380009        TEQ              R8,R9
   20 00000014 0A000097        BEQ              PROC3
   21 00000018         
   22 00000018 E2499001        SUB              R9,R9,1
   23 0000001C E1380009        TEQ              R8,R9
   24 00000020 0A000064        BEQ              PROC2
   25 00000024         
   26 00000024 E2499001        SUB              R9,R9,1
   27 00000028 E1380009        TEQ              R8,R9
   28 0000002C 0A000002        BEQ              PROC1
   29 00000030         
   30 00000030 E2499001        SUB              R9,R9,1
   31 00000034 E1380009        TEQ              R8,R9
   32 00000038 0A00002E        BEQ              PROC0
   33 0000003C         
   34 0000003C         
   35 0000003C         PROC1
   36 0000003C         
   37 0000003C         ;LDR R10,=0x00000002     ;else write back flag as 2
   38 0000003C         ;STR R10,[R8]
   39 0000003C         
   40 0000003C         ;now we have to load process of 8000
   41 0000003C         
   42 0000003C E84D2000        STMDA            R13,{R13}^  ;Get user mode curr
                                                            ent sp
   43 00000040 E89D0100        LDMIA            R13,{R8}    ;Store user mode SP
                                                             in R8
   44 00000044 E2488004        SUB              R8,R8,#4    ;Reduce user sp by 
                                                            4
   45 00000048 E59F93A4        LDR              R9,=0X40001FDC



ARM Macro Assembler    Page 2 


   46 0000004C E5898000        STR              R8,[R9]
   47 00000050         ;STMDA R13,{R8}                 ;Put it back to stack
   48 00000050         ;LDMIA R13,{R13}^               ;User modes SP increased
                        by 4
   49 00000050         
   50 00000050 E59F93A0        LDR              R9,=0x40001038 ;Find the proces
                                                            s return address
   51 00000054 E5999000        LDR              R9,[R9]     ;Get the address
   52 00000058 E2499004        SUB              R9,R9,#4    ;Reduce return addr
                                                            ess by 4
   53 0000005C E5889000        STR              R9,[R8]     ;Store the return a
                                                            ddress on user mode
                                                            's process stack
   54 00000060         ;LDR R8,=0X40001FE8
   55 00000060         ;LDMIA R8,{R0-R4}                ;POP WORKING REG
   56 00000060 E59F8394        LDR              R8,=0x4000607C
   57 00000064 E8485FFF        STMDA            R8,{R0-R12,R14}^ ;all resgister
                                                            s saved
   58 00000068 E14F8000        MRS              R8, SPSR
   59 0000006C E59F938C        LDR              R9,=0x40001F04
   60 00000070 E5898000        STR              R8,[R9]
   61 00000074         
   62 00000074         ;UART0 debugging
   63 00000074         ;  LDR R8,=0x31
   64 00000074         ;  LDR R9,=U0THR
   65 00000074         ;  STR R8,[R9]
   66 00000074         
   67 00000074         
   68 00000074         ;now to save the 1k reg of ram at 0x40003000
   69 00000074 E59FE388        LDR              R14,=0x40003000
   70 00000078 E3A0C101        LDR              R12,=0x40000000
   71 0000007C E3A0B05B        LDR              R11,=0x0000005B
   72 00000080         
   73 00000080         CONTINUE1
   74 00000080         
   75 00000080 E89C07FF        LDMIA            R12,{R0-R10}
   76 00000084 E88E07FF        STMIA            R14,{R0-R10}
   77 00000088 E28CC02C        ADD              R12,#0x0000002C
   78 0000008C E28EE02C        ADD              R14,#0x0000002C
   79 00000090 E25BB001        SUBS             R11,#1
   80 00000094 2AFFFFF9        BCS              CONTINUE1
   81 00000098 EA0000A6        B                SCHEDULAR
   82 0000009C         
   83 0000009C         ;load the proc 4000 reg
   84 0000009C         L_2
   85 0000009C E3A0E101        LDR              R14,=0x40000000
   86 000000A0 E59FC360        LDR              R12,=0x40004000
   87 000000A4 E3A0B05B        LDR              R11,=0x0000005B
   88 000000A8         ;LDR R11,=0x00000004
   89 000000A8         
   90 000000A8         CONTINUE2
   91 000000A8         
   92 000000A8 E89C07FF        LDMIA            R12,{R0-R10}
   93 000000AC E88E07FF        STMIA            R14,{R0-R10}
   94 000000B0 E28CC02C        ADD              R12,#0x0000002C
   95 000000B4 E28EE02C        ADD              R14,#0x0000002C
   96 000000B8 E25BB001        SUBS             R11,#1
   97 000000BC 2AFFFFF9        BCS              CONTINUE2
   98 000000C0         



ARM Macro Assembler    Page 3 


   99 000000C0 E59F8344        LDR              R8,=0X40001FE0
  100 000000C4 E8D82000        LDMIA            R8,{R13}^
  101 000000C8         
  102 000000C8 E59F8340        LDR              R8,=0x40006088
  103 000000CC E8D85FFF        LDMIA            R8,{R0-R12,R14}^ ;Load the user
                                                             mode register
  104 000000D0         
  105 000000D0 E59FD33C        LDR              R13,=0x4000103C
  106 000000D4         
  107 000000D4 E59F833C        LDR              R8,=0x40001F08
  108 000000D8 E5988000        LDR              R8,[R8]
  109 000000DC         ;ORR R8,R8,#Mode_USR
  110 000000DC         
  111 000000DC E321F010        MSR              CPSR_c, #Mode_USR ;Change the m
                                                            ode to user mode
  112 000000E0         
  113 000000E0 E92D0003        STMDB            R13!,{R0-R1}
  114 000000E4 E59F032C        LDR              R0,=0x40001F08
  115 000000E8 E5900000        LDR              R0,[R0]
  116 000000EC E128F000        MSR              CPSR_f,R0
  117 000000F0 E8BD0003        LDMIA            R13!,{R0-R1}
  118 000000F4         
  119 000000F4 E8BD8000        LDMIA            R13!,{R15}
  120 000000F8         
  121 000000F8         
  122 000000F8         PROC0
  123 000000F8         
  124 000000F8         ;LDR R10,=0x00000001
  125 000000F8         ;LDR R8,=0X40001FFC     ;else write back flag as 1
  126 000000F8         ;STR R10,[R8]
  127 000000F8         
  128 000000F8         ;now we have to load process of 6000
  129 000000F8         
  130 000000F8 E84D2000        STMDA            R13,{R13}^  ;Get user mode curr
                                                            ent sp
  131 000000FC E89D0100        LDMIA            R13,{R8}    ;Store user mode SP
                                                             in R8
  132 00000100 E2488004        SUB              R8,R8,#4    ;Reduce user sp by 
                                                            4
  133 00000104 E59F9310        LDR              R9,=0X40001FD8
  134 00000108 E5898000        STR              R8,[R9]
  135 0000010C         ;STMDA R13,{R8}                 ;Put it back to stack
  136 0000010C         ;LDMIA R13,{R13}^               ;User modes SP increased
                        by 4
  137 0000010C         
  138 0000010C E59F92E4        LDR              R9,=0x40001038 ;Find the proces
                                                            s return address
  139 00000110 E5999000        LDR              R9,[R9]     ;Get the address
  140 00000114 E2499004        SUB              R9,R9,#4    ;Reduce return addr
                                                            ess by 4
  141 00000118 E5889000        STR              R9,[R8]     ;Store the return a
                                                            ddress on user mode
                                                            's process stack
  142 0000011C         ;LDR R8,=0X40001FE8
  143 0000011C         ;LDMIA R8,{R0-R4}                ;POP WORKING REG
  144 0000011C E59F82FC        LDR              R8,=0x4000603C
  145 00000120 E8485FFF        STMDA            R8,{R0-R12,R14}^ ;all resgister
                                                            s saved
  146 00000124 E14F8000        MRS              R8, SPSR



ARM Macro Assembler    Page 4 


  147 00000128 E59F92F4        LDR              R9,=0x40001F00
  148 0000012C E5898000        STR              R8,[R9]
  149 00000130         
  150 00000130         ;UART0 debugging
  151 00000130         ;  LDR R0,=0x30
  152 00000130         ;  LDR R1,=U0THR
  153 00000130         ;  STR R0,[R1]
  154 00000130         
  155 00000130         
  156 00000130         ;now to save the 1k reg of ram at 0x40006000
  157 00000130 E59FE2F0        LDR              R14,=0x40002000
  158 00000134 E3A0C101        LDR              R12,=0x40000000
  159 00000138 E3A0B05B        LDR              R11,=0x0000005B
  160 0000013C         ;LDR R11,=0x00000004
  161 0000013C         
  162 0000013C         CONTINUE3
  163 0000013C         
  164 0000013C E89C07FF        LDMIA            R12,{R0-R10}
  165 00000140 E88E07FF        STMIA            R14,{R0-R10}
  166 00000144 E28CC02C        ADD              R12,#0x0000002C
  167 00000148 E28EE02C        ADD              R14,#0x0000002C
  168 0000014C E25BB001        SUBS             R11,#1
  169 00000150 2AFFFFF9        BCS              CONTINUE3
  170 00000154 EA000077        B                SCHEDULAR
  171 00000158         
  172 00000158         ;load the proc 7000 reg
  173 00000158         L_1
  174 00000158 E3A0E101        LDR              R14,=0x40000000
  175 0000015C E59FC2A0        LDR              R12,=0x40003000
  176 00000160 E3A0B05B        LDR              R11,=0x0000005B
  177 00000164         ;LDR R11,=0x00000004
  178 00000164         
  179 00000164         CONTINUE4
  180 00000164         
  181 00000164 E89C07FF        LDMIA            R12,{R0-R10}
  182 00000168 E88E07FF        STMIA            R14,{R0-R10}
  183 0000016C E28CC02C        ADD              R12,#0x0000002C
  184 00000170 E28EE02C        ADD              R14,#0x0000002C
  185 00000174 E25BB001        SUBS             R11,#1
  186 00000178 2AFFFFF9        BCS              CONTINUE4
  187 0000017C         
  188 0000017C E59F8270        LDR              R8,=0X40001FDC
  189 00000180 E8D82000        LDMIA            R8,{R13}^
  190 00000184         
  191 00000184 E59F82A0        LDR              R8,=0x40006048
  192 00000188 E8D85FFF        LDMIA            R8,{R0-R12,R14}^ ;Load the user
                                                             mode register
  193 0000018C         
  194 0000018C E59FD280        LDR              R13,=0x4000103C
  195 00000190         
  196 00000190 E59F8268        LDR              R8,=0x40001F04
  197 00000194 E5988000        LDR              R8,[R8]
  198 00000198 E3888010        ORR              R8,R8,#Mode_USR
  199 0000019C         
  200 0000019C E321F010        MSR              CPSR_c, #Mode_USR ;Change the m
                                                            ode to user mode 
  201 000001A0         
  202 000001A0 E92D0003        STMDB            R13!,{R0-R1}
  203 000001A4 E59F0254        LDR              R0,=0x40001F04



ARM Macro Assembler    Page 5 


  204 000001A8 E5900000        LDR              R0,[R0]
  205 000001AC E128F000        MSR              CPSR_f,R0
  206 000001B0 E8BD0003        LDMIA            R13!,{R0-R1}
  207 000001B4         
  208 000001B4         
  209 000001B4 E8BD8000        LDMIA            R13!,{R15}
  210 000001B8         
  211 000001B8         
  212 000001B8         PROC2
  213 000001B8         ;LDR R10,=0x00000003     ;else write back flag as 3
  214 000001B8         ;STR R10,[R8]
  215 000001B8         ;now we have to load process of 7000
  216 000001B8         
  217 000001B8 E84D2000        STMDA            R13,{R13}^  ;Get user mode curr
                                                            ent sp
  218 000001BC E89D0100        LDMIA            R13,{R8}    ;Store user mode SP
                                                             in R8
  219 000001C0 E2488004        SUB              R8,R8,#4    ;Reduce user sp by 
                                                            4
  220 000001C4 E59F9240        LDR              R9,=0X40001FE0
  221 000001C8 E5898000        STR              R8,[R9]
  222 000001CC         ;STMDA R13,{R8}                 ;Put it back to stack
  223 000001CC         ;LDMIA R13,{R13}^               ;User modes SP increased
                        by 4
  224 000001CC         
  225 000001CC E59F9224        LDR              R9,=0x40001038 ;Find the proces
                                                            s return address
  226 000001D0 E5999000        LDR              R9,[R9]     ;Get the address
  227 000001D4 E2499004        SUB              R9,R9,#4    ;Reduce return addr
                                                            ess by 4
  228 000001D8 E5889000        STR              R9,[R8]     ;Store the return a
                                                            ddress on user mode
                                                            's process stack
  229 000001DC         ;LDR R8,=0X40001FEC
  230 000001DC         ;LDMIA R8,{R0-R4}                ;POP WORKING REG
  231 000001DC E59F824C        LDR              R8,=0x400060BC
  232 000001E0 E8485FFF        STMDA            R8,{R0-R12,R14}^ ;all resgister
                                                            s saved
  233 000001E4         
  234 000001E4 E14F8000        MRS              R8, SPSR
  235 000001E8 E59F9228        LDR              R9,=0x40001F08
  236 000001EC E5898000        STR              R8,[R9]
  237 000001F0         
  238 000001F0         ;UART0 debugging
  239 000001F0         ;  LDR R0,=0x32
  240 000001F0         ;  LDR R1,=U0THR
  241 000001F0         ;  STR R0,[R1]
  242 000001F0         
  243 000001F0         
  244 000001F0         ;now to save the 1k reg of ram at 0x40007C00
  245 000001F0 E59FE210        LDR              R14,=0x40004000
  246 000001F4 E3A0C101        LDR              R12,=0x40000000
  247 000001F8 E3A0B05B        LDR              R11,=0x0000005B
  248 000001FC         ;LDR R11,=0x00000004
  249 000001FC         
  250 000001FC         CONTINUE5
  251 000001FC         
  252 000001FC E89C07FF        LDMIA            R12,{R0-R10}
  253 00000200 E88E07FF        STMIA            R14,{R0-R10}



ARM Macro Assembler    Page 6 


  254 00000204 E28CC02C        ADD              R12,#0x0000002C
  255 00000208 E28EE02C        ADD              R14,#0x0000002C
  256 0000020C E25BB001        SUBS             R11,#1
  257 00000210 2AFFFFF9        BCS              CONTINUE5
  258 00000214 EA000047        B                SCHEDULAR
  259 00000218         
  260 00000218         ;load the proc 7000 reg
  261 00000218         L_3
  262 00000218 E3A0E101        LDR              R14,=0x40000000
  263 0000021C E59FC210        LDR              R12,=0x40005000
  264 00000220 E3A0B05B        LDR              R11,=0x0000005B
  265 00000224         ;LDR R11,=0x00000004
  266 00000224         
  267 00000224         CONTINUE6
  268 00000224         
  269 00000224 E89C07FF        LDMIA            R12,{R0-R10}
  270 00000228 E88E07FF        STMIA            R14,{R0-R10}
  271 0000022C E28CC02C        ADD              R12,#0x0000002C
  272 00000230 E28EE02C        ADD              R14,#0x0000002C
  273 00000234 E25BB001        SUBS             R11,#1
  274 00000238 2AFFFFF9        BCS              CONTINUE6
  275 0000023C E59F81F4        LDR              R8,=0X40001FE4
  276 00000240 E8D82000        LDMIA            R8,{R13}^
  277 00000244         
  278 00000244         
  279 00000244 E59F81F0        LDR              R8,=0x400060C8
  280 00000248 E8D85FFF        LDMIA            R8,{R0-R12,R14}^ ;Load the user
                                                             mode register
  281 0000024C         
  282 0000024C E59FD1C0        LDR              R13,=0x4000103C
  283 00000250         
  284 00000250 E59F81E8        LDR              R8,=0x40001F0C
  285 00000254 E5988000        LDR              R8,[R8]
  286 00000258 E3888010        ORR              R8,R8,#Mode_USR
  287 0000025C         
  288 0000025C E321F010        MSR              CPSR_c, #Mode_USR ;Change the m
                                                            ode to user mode 
  289 00000260 E92D0003        STMDB            R13!,{R0-R1}
  290 00000264 E59F01D4        LDR              R0,=0x40001F0C
  291 00000268 E5900000        LDR              R0,[R0]
  292 0000026C E128F000        MSR              CPSR_f,R0
  293 00000270 E8BD0003        LDMIA            R13!,{R0-R1}
  294 00000274         
  295 00000274         
  296 00000274 E8BD8000        LDMIA            R13!,{R15}
  297 00000278         
  298 00000278         
  299 00000278         
  300 00000278         
  301 00000278         
  302 00000278         
  303 00000278         
  304 00000278         
  305 00000278         PROC3
  306 00000278         ;LDR R10,=0x00000000     ;else write back flag as 0
  307 00000278         ;STR R10,[R8]
  308 00000278         ;now we have to load process of 7000
  309 00000278         
  310 00000278 E84D2000        STMDA            R13,{R13}^  ;Get user mode curr



ARM Macro Assembler    Page 7 


                                                            ent sp
  311 0000027C E89D0100        LDMIA            R13,{R8}    ;Store user mode SP
                                                             in R8
  312 00000280 E2488004        SUB              R8,R8,#4    ;Reduce user sp by 
                                                            4
  313 00000284 E59F91AC        LDR              R9,=0X40001FE4
  314 00000288 E5898000        STR              R8,[R9]
  315 0000028C         ;STMDA R13,{R8}                 ;Put it back to stack
  316 0000028C         ;LDMIA R13,{R13}^               ;User modes SP increased
                        by 4
  317 0000028C         
  318 0000028C E59F9164        LDR              R9,=0x40001038 ;Find the proces
                                                            s return address
  319 00000290 E5999000        LDR              R9,[R9]     ;Get the address
  320 00000294 E2499004        SUB              R9,R9,#4    ;Reduce return addr
                                                            ess by 4
  321 00000298 E5889000        STR              R9,[R8]     ;Store the return a
                                                            ddress on user mode
                                                            's process stack
  322 0000029C         
  323 0000029C         ;LDR R8,=0X40001FEC
  324 0000029C         ;LDMIA R8,{R0-R4}
  325 0000029C E59F81A0        LDR              R8,=0x400060FC
  326 000002A0 E8485FFF        STMDA            R8,{R0-R12,R14}^ ;all resgister
                                                            s saved
  327 000002A4         
  328 000002A4 E14F8000        MRS              R8, SPSR
  329 000002A8 E59F9190        LDR              R9,=0x40001F0C
  330 000002AC E5898000        STR              R8,[R9]
  331 000002B0         
  332 000002B0         ;UART0 debugging
  333 000002B0         ;  LDR R0,=0x33
  334 000002B0         ;  LDR R1,=U0THR
  335 000002B0         ;  STR R0,[R1]
  336 000002B0         
  337 000002B0         
  338 000002B0         ;now to save the 1k reg of ram at 0x40007C00
  339 000002B0 E59FE17C        LDR              R14,=0x40005000
  340 000002B4 E3A0C101        LDR              R12,=0x40000000
  341 000002B8 E3A0B05B        LDR              R11,=0x0000005B
  342 000002BC         ;LDR R11,=0x00000004
  343 000002BC         
  344 000002BC         CONTINUE7
  345 000002BC         
  346 000002BC E89C07FF        LDMIA            R12,{R0-R10}
  347 000002C0 E88E07FF        STMIA            R14,{R0-R10}
  348 000002C4 E28CC02C        ADD              R12,#0x0000002C
  349 000002C8 E28EE02C        ADD              R14,#0x0000002C
  350 000002CC E25BB001        SUBS             R11,#1
  351 000002D0 2AFFFFF9        BCS              CONTINUE7
  352 000002D4         
  353 000002D4 EA000017        B                SCHEDULAR
  354 000002D8         
  355 000002D8         ;load the proc 7000 reg
  356 000002D8         L_0
  357 000002D8 E3A0E101        LDR              R14,=0x40000000
  358 000002DC E59FC144        LDR              R12,=0x40002000
  359 000002E0 E3A0B05B        LDR              R11,=0x0000005B
  360 000002E4         ;LDR R11,=0x00000004



ARM Macro Assembler    Page 8 


  361 000002E4         
  362 000002E4         CONTINUE8
  363 000002E4         
  364 000002E4 E89C07FF        LDMIA            R12,{R0-R10}
  365 000002E8 E88E07FF        STMIA            R14,{R0-R10}
  366 000002EC E28CC02C        ADD              R12,#0x0000002C
  367 000002F0 E28EE02C        ADD              R14,#0x0000002C
  368 000002F4 E25BB001        SUBS             R11,#1
  369 000002F8 2AFFFFF9        BCS              CONTINUE8
  370 000002FC E59F8118        LDR              R8,=0X40001FD8
  371 00000300 E8D82000        LDMIA            R8,{R13}^
  372 00000304         
  373 00000304 E59F813C        LDR              R8,=0x40006008
  374 00000308 E8D85FFF        LDMIA            R8,{R0-R12,R14}^ ;Load the user
                                                             mode register
  375 0000030C         
  376 0000030C E59FD100        LDR              R13,=0x4000103C
  377 00000310         
  378 00000310 E59F810C        LDR              R8,=0x40001F00
  379 00000314 E5988000        LDR              R8,[R8]
  380 00000318 E3888010        ORR              R8,R8,#Mode_USR
  381 0000031C         
  382 0000031C E321F010        MSR              CPSR_c, #Mode_USR ;Change the m
                                                            ode to user mode 
  383 00000320 E92D0003        STMDB            R13!,{R0-R1}
  384 00000324 E59F00F8        LDR              R0,=0x40001F00
  385 00000328 E5900000        LDR              R0,[R0]
  386 0000032C E128F000        MSR              CPSR_f,R0
  387 00000330 E8BD0003        LDMIA            R13!,{R0-R1}
  388 00000334         
  389 00000334         
  390 00000334 E8BD8000        LDMIA            R13!,{R15}
  391 00000338         
  392 00000338         SCHEDULAR
  393 00000338         
  394 00000338         ;Moving the queu up
  395 00000338 E59F80B0        LDR              R8,=0x40001F10
  396 0000033C E5D8A000        LDRB             R10,[R8]
  397 00000340         
  398 00000340 E59F8104        LDR              R8,=0x40001F11
  399 00000344 E5D8B000        LDRB             R11,[R8]
  400 00000348         
  401 00000348 E59F90A0        LDR              R9,=0x40001F10
  402 0000034C E5C9B000        STRB             R11,[R9]
  403 00000350         
  404 00000350 E59F80F8        LDR              R8,=0x40001F12
  405 00000354 E5D8B000        LDRB             R11,[R8]
  406 00000358         
  407 00000358 E59F90EC        LDR              R9,=0x40001F11
  408 0000035C E5C9B000        STRB             R11,[R9]
  409 00000360         
  410 00000360 E59F80EC        LDR              R8,=0x40001F13
  411 00000364 E5D8B000        LDRB             R11,[R8]
  412 00000368         
  413 00000368 E59F90E0        LDR              R9,=0x40001F12
  414 0000036C E5C9B000        STRB             R11,[R9]
  415 00000370         
  416 00000370 E5C8A000        STRB             R10,[R8]
  417 00000374         ;top corresponds to the next incomming proc



ARM Macro Assembler    Page 9 


  418 00000374         ;now check if the proc is ready else repete
  419 00000374         
  420 00000374 E59F8074        LDR              R8,=0x40001F10 ;top of queu
  421 00000378 E5D88000        LDRB             R8,[R8]     ;get it in
  422 0000037C         
  423 0000037C E3A09000        LDR              R9,=0
  424 00000380         
  425 00000380 E1380009        TEQ              R8,R9
  426 00000384 0A00000A        BEQ              ZERO
  427 00000388         
  428 00000388         
  429 00000388 E2899001        ADD              R9,R9,#1
  430 0000038C E1380009        TEQ              R8,R9
  431 00000390 0A00000C        BEQ              ONE
  432 00000394         
  433 00000394 E2899001        ADD              R9,R9,#1
  434 00000398 E1380009        TEQ              R8,R9
  435 0000039C 0A00000E        BEQ              TWO
  436 000003A0         
  437 000003A0 E59F80B0        LDR              R8,=0x40001F18
  438 000003A4 E5D88000        LDRB             R8,[R8]
  439 000003A8 E3380000        TEQ              R8,#0
  440 000003AC 0AFFFF99        BEQ              L_3
  441 000003B0 EAFFFFE0        B                SCHEDULAR
  442 000003B4         
  443 000003B4         ZERO
  444 000003B4 E59F80A0        LDR              R8,=0x40001F15
  445 000003B8 E5D88000        LDRB             R8,[R8]
  446 000003BC E3380000        TEQ              R8,#0
  447 000003C0 0AFFFFC4        BEQ              L_0
  448 000003C4 EAFFFFDB        B                SCHEDULAR
  449 000003C8         
  450 000003C8         ONE
  451 000003C8 E59F8090        LDR              R8,=0x40001F16
  452 000003CC E5D88000        LDRB             R8,[R8]
  453 000003D0 E3380000        TEQ              R8,#0
  454 000003D4 0AFFFF5F        BEQ              L_1
  455 000003D8 EAFFFFD6        B                SCHEDULAR
  456 000003DC         
  457 000003DC         TWO
  458 000003DC E59F8080        LDR              R8,=0x40001F17
  459 000003E0 E5D88000        LDRB             R8,[R8]
  460 000003E4 E3380000        TEQ              R8,#0
  461 000003E8 0AFFFF2B        BEQ              L_2
  462 000003EC EAFFFFD1        B                SCHEDULAR
  463 000003F0         
  464 000003F0         
  465 000003F0 40001F10 
              40001FDC 
              40001038 
              4000607C 
              40001F04 
              40003000 
              40004000 
              40001FE0 
              40006088 
              4000103C 
              40001F08 
              40001FD8 



ARM Macro Assembler    Page 10 


              4000603C 
              40001F00 
              40002000 
              40006048 
              400060BC 
              40005000 
              40001FE4 
              400060C8 
              40001F0C 
              400060FC 
              40006008 
              40001F11 
              40001F12 
              40001F13 
              40001F18 
              40001F15 
              40001F16 
              40001F17         AREA             push_working_reg,CODE,READONLY
  466 00000000                 EXPORT           push_working_reg
  467 00000000         
  468 00000000 E59F8004        LDR              R8,=0x40001FF8
  469 00000004 E808001F        STMDA            R8,{R0-R4}
  470 00000008         
  471 00000008 E12FFF1E        BX               R14
  472 0000000C         
  473 0000000C                 END
              40001FF8 
Command Line: --debug --xref --apcs=interwork --depend=context_switch.d -oconte
xt_switch.o -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Philips --list=context_switch.lst context_switch.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CONTINUE1 00000080

Symbol: CONTINUE1
   Definitions
      At line 73 in file context_switch.s
   Uses
      At line 80 in file context_switch.s
Comment: CONTINUE1 used once
CONTINUE2 000000A8

Symbol: CONTINUE2
   Definitions
      At line 90 in file context_switch.s
   Uses
      At line 97 in file context_switch.s
Comment: CONTINUE2 used once
CONTINUE3 0000013C

Symbol: CONTINUE3
   Definitions
      At line 162 in file context_switch.s
   Uses
      At line 169 in file context_switch.s
Comment: CONTINUE3 used once
CONTINUE4 00000164

Symbol: CONTINUE4
   Definitions
      At line 179 in file context_switch.s
   Uses
      At line 186 in file context_switch.s
Comment: CONTINUE4 used once
CONTINUE5 000001FC

Symbol: CONTINUE5
   Definitions
      At line 250 in file context_switch.s
   Uses
      At line 257 in file context_switch.s
Comment: CONTINUE5 used once
CONTINUE6 00000224

Symbol: CONTINUE6
   Definitions
      At line 267 in file context_switch.s
   Uses
      At line 274 in file context_switch.s
Comment: CONTINUE6 used once
CONTINUE7 000002BC

Symbol: CONTINUE7
   Definitions
      At line 344 in file context_switch.s
   Uses
      At line 351 in file context_switch.s
Comment: CONTINUE7 used once
CONTINUE8 000002E4

Symbol: CONTINUE8



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 362 in file context_switch.s
   Uses
      At line 369 in file context_switch.s
Comment: CONTINUE8 used once
L_0 000002D8

Symbol: L_0
   Definitions
      At line 356 in file context_switch.s
   Uses
      At line 447 in file context_switch.s
Comment: L_0 used once
L_1 00000158

Symbol: L_1
   Definitions
      At line 173 in file context_switch.s
   Uses
      At line 454 in file context_switch.s
Comment: L_1 used once
L_2 0000009C

Symbol: L_2
   Definitions
      At line 84 in file context_switch.s
   Uses
      At line 461 in file context_switch.s
Comment: L_2 used once
L_3 00000218

Symbol: L_3
   Definitions
      At line 261 in file context_switch.s
   Uses
      At line 440 in file context_switch.s
Comment: L_3 used once
ONE 000003C8

Symbol: ONE
   Definitions
      At line 450 in file context_switch.s
   Uses
      At line 431 in file context_switch.s
Comment: ONE used once
PROC0 000000F8

Symbol: PROC0
   Definitions
      At line 122 in file context_switch.s
   Uses
      At line 32 in file context_switch.s
Comment: PROC0 used once
PROC1 0000003C

Symbol: PROC1
   Definitions
      At line 35 in file context_switch.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 28 in file context_switch.s
Comment: PROC1 used once
PROC2 000001B8

Symbol: PROC2
   Definitions
      At line 212 in file context_switch.s
   Uses
      At line 24 in file context_switch.s
Comment: PROC2 used once
PROC3 00000278

Symbol: PROC3
   Definitions
      At line 305 in file context_switch.s
   Uses
      At line 20 in file context_switch.s
Comment: PROC3 used once
SCHEDULAR 00000338

Symbol: SCHEDULAR
   Definitions
      At line 392 in file context_switch.s
   Uses
      At line 81 in file context_switch.s
      At line 170 in file context_switch.s
      At line 258 in file context_switch.s
      At line 353 in file context_switch.s
      At line 441 in file context_switch.s
      At line 448 in file context_switch.s
      At line 455 in file context_switch.s
      At line 462 in file context_switch.s

TWO 000003DC

Symbol: TWO
   Definitions
      At line 457 in file context_switch.s
   Uses
      At line 435 in file context_switch.s
Comment: TWO used once
ZERO 000003B4

Symbol: ZERO
   Definitions
      At line 443 in file context_switch.s
   Uses
      At line 426 in file context_switch.s
Comment: ZERO used once
context_switch 00000000

Symbol: context_switch
   Definitions
      At line 10 in file context_switch.s
   Uses
      At line 11 in file context_switch.s
Comment: context_switch used once
21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

push_working_reg 00000000

Symbol: push_working_reg
   Definitions
      At line 465 in file context_switch.s
   Uses
      At line 466 in file context_switch.s
Comment: push_working_reg used once
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Mode_USR 00000010

Symbol: Mode_USR
   Definitions
      At line 5 in file context_switch.s
   Uses
      At line 111 in file context_switch.s
      At line 198 in file context_switch.s
      At line 200 in file context_switch.s
      At line 286 in file context_switch.s
      At line 288 in file context_switch.s
      At line 380 in file context_switch.s
      At line 382 in file context_switch.s

T0IR E0004000

Symbol: T0IR
   Definitions
      At line 2 in file context_switch.s
   Uses
      None
Comment: T0IR unused
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 8 in file context_switch.s
   Uses
      None
Comment: U0LSR unused
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 7 in file context_switch.s
   Uses
      None
Comment: U0THR unused
VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 3 in file context_switch.s
   Uses
      None
Comment: VICIntEnable unused
VICVectAddr FFFFF034

Symbol: VICVectAddr
   Definitions
      At line 4 in file context_switch.s
   Uses
      None
Comment: VICVectAddr unused
VICVectCntl0 FFFFF200

Symbol: VICVectCntl0
   Definitions
      At line 6 in file context_switch.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Uses
      None
Comment: VICVectCntl0 unused
7 symbols
363 symbols in table
